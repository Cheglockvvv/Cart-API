// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/service/cart.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github.com/Cheglockvvv/Cart-API/app/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartRepository is a mock of CartRepository interface.
type MockCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartRepositoryMockRecorder
}

// MockCartRepositoryMockRecorder is the mock recorder for MockCartRepository.
type MockCartRepositoryMockRecorder struct {
	mock *MockCartRepository
}

// NewMockCartRepository creates a new mock instance.
func NewMockCartRepository(ctrl *gomock.Controller) *MockCartRepository {
	mock := &MockCartRepository{ctrl: ctrl}
	mock.recorder = &MockCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartRepository) EXPECT() *MockCartRepositoryMockRecorder {
	return m.recorder
}

// CartIsAvailable mocks base method.
func (m *MockCartRepository) CartIsAvailable(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CartIsAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CartIsAvailable indicates an expected call of CartIsAvailable.
func (mr *MockCartRepositoryMockRecorder) CartIsAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CartIsAvailable", reflect.TypeOf((*MockCartRepository)(nil).CartIsAvailable), arg0, arg1)
}

// CreateCart mocks base method.
func (m *MockCartRepository) CreateCart(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartRepositoryMockRecorder) CreateCart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartRepository)(nil).CreateCart), arg0)
}

// GetCartByID mocks base method.
func (m *MockCartRepository) GetCartByID(arg0 context.Context, arg1 string) (models.Cart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartByID", arg0, arg1)
	ret0, _ := ret[0].(models.Cart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartByID indicates an expected call of GetCartByID.
func (mr *MockCartRepositoryMockRecorder) GetCartByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartByID", reflect.TypeOf((*MockCartRepository)(nil).GetCartByID), arg0, arg1)
}
