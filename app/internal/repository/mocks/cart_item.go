// Code generated by MockGen. DO NOT EDIT.
// Source: app/internal/service/cart_item.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "Cart-API/app/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCartItemRepository is a mock of CartItemRepository interface.
type MockCartItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCartItemRepositoryMockRecorder
}

// MockCartItemRepositoryMockRecorder is the mock recorder for MockCartItemRepository.
type MockCartItemRepositoryMockRecorder struct {
	mock *MockCartItemRepository
}

// NewMockCartItemRepository creates a new mock instance.
func NewMockCartItemRepository(ctrl *gomock.Controller) *MockCartItemRepository {
	mock := &MockCartItemRepository{ctrl: ctrl}
	mock.recorder = &MockCartItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartItemRepository) EXPECT() *MockCartItemRepositoryMockRecorder {
	return m.recorder
}

// AddItemToCart mocks base method.
func (m *MockCartItemRepository) AddItemToCart(arg0 context.Context, arg1, arg2 string, arg3 int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddItemToCart", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddItemToCart indicates an expected call of AddItemToCart.
func (mr *MockCartItemRepositoryMockRecorder) AddItemToCart(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItemToCart", reflect.TypeOf((*MockCartItemRepository)(nil).AddItemToCart), arg0, arg1, arg2, arg3)
}

// GetItemByID mocks base method.
func (m *MockCartItemRepository) GetItemByID(arg0 context.Context, arg1 string) (models.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByID", arg0, arg1)
	ret0, _ := ret[0].(models.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByID indicates an expected call of GetItemByID.
func (mr *MockCartItemRepositoryMockRecorder) GetItemByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByID", reflect.TypeOf((*MockCartItemRepository)(nil).GetItemByID), arg0, arg1)
}

// ItemIsAvailable mocks base method.
func (m *MockCartItemRepository) ItemIsAvailable(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ItemIsAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ItemIsAvailable indicates an expected call of ItemIsAvailable.
func (mr *MockCartItemRepositoryMockRecorder) ItemIsAvailable(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ItemIsAvailable", reflect.TypeOf((*MockCartItemRepository)(nil).ItemIsAvailable), arg0, arg1)
}

// RemoveItemFromCart mocks base method.
func (m *MockCartItemRepository) RemoveItemFromCart(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveItemFromCart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveItemFromCart indicates an expected call of RemoveItemFromCart.
func (mr *MockCartItemRepositoryMockRecorder) RemoveItemFromCart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItemFromCart", reflect.TypeOf((*MockCartItemRepository)(nil).RemoveItemFromCart), arg0, arg1, arg2)
}
